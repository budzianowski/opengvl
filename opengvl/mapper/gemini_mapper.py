from opengvl.mapper.base import BaseMapper
from google import genai
from google.genai import types
from dotenv import load_dotenv
import json
import os
import time
from opengvl.utils.errors import PercentagesNormalizationError

load_dotenv()


class GeminiMapper(BaseMapper):
    def __init__(self, model_name: str = "gemini-2.5-flash", max_new_tokens: int = 1024,         
        temperature: float = 0.5, retries: int = 3):
        super().__init__()
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))
        self.developer_prompt = self._get_developer_prompt()
        self.retries = retries

    def _get_developer_prompt(self) -> str:
        """
        Returns the formatted developer prompt for the Google GenAI API call.
        """
        prompt_template = """
    You are a specialized data extractor. Your sole purpose is to identify and extract task completion percentages for given frames from the provided text.

    **Instructions:**

    1.  **Identify Percentages:** Scan the user's message and identify all occurrences of task completion percentages. These are typically expressed as numbers followed by a percent sign (e.g., "5%", "30%", etc.). Don't take into consideration overall task completion, starting frame completion, or any other non-specific percentages. If frame i appears multiple times, extract only one percentage for that frame (the first one).
    2.  **Extract Numerical Values:** From each identified percentage, extract only the numerical value. For example, from "5%", you will extract the number `5`.
    3.  **Format as JSON:** Compile all extracted numerical values into a single JSON object. The JSON object must be in the following format: `{"prediction": [list_of_percentages]}`.
    4.  **No Percentages Found:** If the user's message contains no percentage values, return an empty list within the JSON object, like this: `{"prediction": []}`.

    **Important:** 
    - Your response must **only** contain the final JSON object. Do not include any additional text, explanations, apologies, or markdown formatting. 
    - Don't take into consideration overall task completion, starting frame completion, or any other non-specific percentages.

    ---

    ### **Example:**

    **User Message:**
    `As an expert roboticist, I will now analyze each frame to predict the task completion percentage for the task of \"open door\". The analysis for each frame is independent and based on a decomposition of the task into key stages: approaching the handle, grasping the handle, and pulling the door open.\n\n**Initial State (0% completion):** The robot is positioned before the closed cabinet, ready to begin the task.\n**Final State (100% completion):** Frame 1: The robot is approaching the cup. Task Completion: 5% Frame 2: The robot is grasping the cup. Task Completion: 30% Frame 3: The robot is lifting the cup. Task Completion: 60% Frame 4: The robot is pouring the liquid. Task Completion: 80% Frame 5: The liquid is flowing into the cup. Task Completion: 90% Frame 6: The pouring is almost complete. Task Completion: 95% Frame 7: The robot is retracting its arm. Task Completion: 98% Frame 8: The robot is returning to its initial position. Task Completion: 99% Frame 9: The robot is back to its initial position. Task Completion: 99% Frame 10: The robot is back to its initial position. Task Completion: 99% Frame 11: The robot is back to its initial position. Task Completion: 99% Frame 12: The robot is back to its initial position. Task Completion: 99% Frame 13: The robot is back to its initial position. Task Completion: 99% Frame 14: The robot is back to its initial position. Task Completion: 99% Frame 15: The robot is back to its initial position. Task Completion: 99% Frame 16: The robot is back to its initial position. Task Completion: 99% Frame 17: The robot is back to its initial position. Task Completion: 99% Frame 18: The robot is back to its initial position. Task Completion: 99% Frame 19: The robot is back to its initial position. Task Completion: 99% Frame 20: The robot is back to its initial position. Task Completion: 100%. Final Task Completion Percentage: 88.0%`

    **Your Response:**
    ```json
    {"prediction": [5, 30, 60, 80, 90, 95, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100]}
    ```

    Answer:
    """
        return prompt_template


    def extract_percentages(self, model_response: str) -> list[float]:
        """
        Uses the Google GenAI API to extract percentages and validates the list length.

        Args:
            model_response: The text generated by a model to be processed.

        Returns:
            A list of extracted percentages as floats.
        """
        local_retries = self.retries
        for attempt in range(local_retries):
            try:
                response = self.client.models.generate_content(
                    model=self.model_name,
                    config=types.GenerateContentConfig(
                        system_instruction=self.developer_prompt,
                        temperature=self.temperature,
                        max_output_tokens=self.max_new_tokens,
                    ),
                    contents=model_response
                )

                response_content = response.text
                if "```json\n" in response_content:
                    response_content = response_content.split("```json\n")[1]
                if "\n```" in response_content:
                    response_content = response_content.split("\n```")[0]

                json_response = json.loads(response_content)

                prediction = json_response.get("prediction", [])
                
                return prediction

            except Exception as e:
                print(f"Error during API call: {e}")
                if attempt < local_retries - 1:
                    print("Retrying...")
                    time.sleep(4)
                else:
                    raise PercentagesNormalizationError

