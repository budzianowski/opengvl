from opengvl.mapper.base import BaseMapper
from google import genai
from google.genai import types
import json
import os
import time
from opengvl.utils.errors import PercentagesNormalizationError


class GeminiMapper(BaseMapper):
    def __init__(self, model_name: str = "gemini-2.5-flash-lite", max_new_tokens: int = 1024,         
        temperature: float = 0.5, retries: int = 3, mapping_prompt: str = ""):
        super().__init__()
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))
        self.retries = retries
        self.mapping_prompt = mapping_prompt.template


    def extract_percentages(self, model_response: str) -> list[float]:
        """
        Uses the Google GenAI API to extract percentages and validates the list length.

        Args:
            model_response: The text generated by a model to be processed.

        Returns:
            A list of extracted percentages as floats.
        """
        local_retries = self.retries
        for attempt in range(local_retries):
            try:
                response = self.client.models.generate_content(
                    model=self.model_name,
                    config=types.GenerateContentConfig(
                        system_instruction=self.mapping_prompt,
                        temperature=self.temperature,
                        max_output_tokens=self.max_new_tokens,
                    ),
                    contents=model_response
                )

                response_content = response.text
    
                if "```json\n" in response_content:
                    response_content = response_content.split("```json\n")[1]
                if "\n```" in response_content:
                    response_content = response_content.split("\n```")[0]

                json_response = json.loads(response_content)

                prediction = json_response.get("prediction", [])
                
                return prediction

            except Exception as e:
                print(f"Error during API call: {e}")
                if attempt < local_retries - 1:
                    print("Retrying...")
                    time.sleep(4)
                else:
                    raise PercentagesNormalizationError

