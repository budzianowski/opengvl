""" Result evaluator """

import json
import os
import time
from typing import Dict, List, Union

from dotenv import load_dotenv
from google import genai
from google.genai import types
from loguru import logger

load_dotenv()


class ResultEvaluator:
    """
    Evaluates a model's text response to extract a list of percentages and
    validates if the list has the expected length.
    """

    def __init__(
        self,
        model_name: str = "gemini-2.5-flash-lite-preview-06-17",
        max_new_tokens: int = 1024,
        temperature: float = 0.5,
        expected_length: int = 20,
    ):
        """
        Initializes the ResultEvaluator.

        Args:
            model_name: The name of the Google GenAI model to use.
            max_new_tokens: The maximum number of tokens for the response.
            expected_length: The required length to check against.
        """
        try:
            self.client = genai.GenerativeModel(
                model_name=model_name,
                api_key=os.getenv("GEMINI_API_KEY"),
                system_instruction=self._get_developer_prompt(),
            )
        except Exception as e:
            logger.error(f"Failed to initialize GenerativeModel: {e}")
            raise
        self.model_name = model_name
        self.max_new_tokens = max_new_tokens
        self.temperature = temperature
        self.expected_length = expected_length

    def _get_developer_prompt(self) -> str:
        """
        Returns the formatted developer prompt for the Google GenAI API call.
        """
        return """
You are a specialized data extraction AI. Your sole purpose is to identify and extract task completion percentages for given frames from the provided text.

**Instructions:**

1.  **Identify Percentages:** Scan the user's message and identify all occurrences of task completion percentages. These are typically expressed as numbers followed by a percent sign (e.g., "5%", "30%", etc.). Don't take into consideration overall task completion, starting frame completion, or any other non-specific percentages.
2.  **Extract Numerical Values:** From each identified percentage, extract only the numerical value. For example, from "5%", you will extract the number `5`.
3.  **Format as JSON:** Compile all extracted numerical values into a single JSON object. The JSON object must be in the following format: `{"prediction": [list_of_percentages]}`.
4.  **No Percentages Found:** If the user's message contains no percentage values, return an empty list within the JSON object, like this: `{"prediction": []}`.

**Important:** Your response must **only** contain the final JSON object. Do not include any additional text, explanations, apologies, or markdown formatting.

---

### **Example:**

**User Message:**
`Frame 1: The robot is approaching the cup. Task Completion: 5% Frame 2: The robot is grasping the cup. Task Completion: 30% Frame 3: The robot is lifting the cup. Task Completion: 60% Frame 4: The robot is pouring the liquid. Task Completion: 80% Frame 5: The liquid is flowing into the cup. Task Completion: 90% Frame 6: The pouring is almost complete. Task Completion: 95% Frame 7: The robot is retracting its arm. Task Completion: 98% Frame 8: The robot is returning to its initial position. Task Completion: 99% Frame 9: The robot is back to its initial position. Task Completion: 99% Frame 10: The robot is back to its initial position. Task Completion: 99% Frame 11: The robot is back to its initial position. Task Completion: 99% Frame 12: The robot is back to its initial position. Task Completion: 99% Frame 13: The robot is back to its initial position. Task Completion: 99% Frame 14: The robot is back to its initial position. Task Completion: 99% Frame 15: The robot is back to its initial position. Task Completion: 99% Frame 16: The robot is back to its initial position. Task Completion: 99% Frame 17: The robot is back to its initial position. Task Completion: 99% Frame 18: The robot is back to its initial position. Task Completion: 99% Frame 19: The robot is back to its initial position. Task Completion: 99% Frame 20: The robot is back to its initial position. Task Completion: 100%. Final Task Completion Percentage: 88.0%`

**Your Response:**
```json
{"prediction": [5, 30, 60, 80, 90, 95, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100]}
```
"""

    def extract_and_validate(
        self, model_response_text: str, retries: int = 3
    ) -> Dict[str, Union[List[int], bool]]:
        """
        Uses the Google GenAI API to extract percentages and validates the list length.

        Args:
            model_response_text: The text generated by a model to be processed.
            retries: The number of times to retry the API call.

        Returns:
            A dictionary containing the 'prediction' list and a 'length_is_valid' boolean.
        """
        for attempt in range(retries):
            try:
                response = self.client.generate_content(
                    contents=model_response_text,
                    generation_config=types.GenerationConfig(
                        temperature=self.temperature,
                        max_output_tokens=self.max_new_tokens,
                    ),
                )

                response_content = response.text.strip()
                if response_content.startswith("```json"):
                    response_content = response_content[7:]
                if response_content.endswith("```"):
                    response_content = response_content[:-3]

                json_response = json.loads(response_content)
                prediction = json_response.get("prediction", [])

                if not isinstance(prediction, list) or not all(isinstance(x, (int, float)) for x in prediction):
                    raise ValueError("Invalid prediction format")

                is_valid_length = len(prediction) == self.expected_length
                return {"prediction": [int(p) for p in prediction], "length_is_valid": is_valid_length}

            except (json.JSONDecodeError, ValueError) as e:
                logger.warning(f"Failed to parse model response on attempt {attempt + 1}: {e}")
                if attempt < retries - 1:
                    time.sleep(2)
                else:
                    logger.error("Failed to parse model response after multiple retries.")
                    return {"prediction": [], "length_is_valid": False}
            except Exception as e:
                logger.error(f"An unexpected error occurred during API call: {e}")
                if attempt < retries - 1:
                    time.sleep(4)
                else:
                    return {"prediction": [], "length_is_valid": False}

        return {"prediction": [], "length_is_valid": False}


if __name__ == "__main__":
    evaluator = ResultEvaluator(expected_length=20)
    test_response = "```json\n{\"prediction\": [5, 30, 60, 80, 90, 95, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100]}\n```"
    result = evaluator.extract_and_validate(test_response)
    assert result["length_is_valid"] is True
    assert result["prediction"] == [5, 30, 60, 80, 90, 95, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100]
    logger.info("Result evaluator test passed.")
